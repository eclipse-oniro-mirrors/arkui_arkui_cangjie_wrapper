/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.

package ohos.arkui.component.view

import ohos.arkui.component.common.*
import ohos.base.*
import std.collection.HashMap
import std.collection.ArrayList

protected class RecycleManager {
    private let cachedRecycleNodes: HashMap<String, ArrayList<CustomView>>
    private let biMap: BidirectionalMap

    protected init() {
        cachedRecycleNodes = HashMap<String, ArrayList<CustomView>>()
        biMap = BidirectionalMap()
    }

    protected func updateNodeId(oldElmtId: Int64, newElmtId: Int64) {
        biMap.remove(oldElmtId)
        biMap.put((oldElmtId, newElmtId))
    }

    protected func proxyNodeId(oldElmtId: Int64): Int64 {
        let proxy = biMap.get(oldElmtId)
        if (let Some(v) <- proxy) {
            return v
        }
        return oldElmtId
    }

    protected func pushRecycleNode(name: String, node: CustomView) {
        if (!cachedRecycleNodes.contains(name)) {
            cachedRecycleNodes.add(name, ArrayList<CustomView>([]))
        }
        if (let Some(arr) <- cachedRecycleNodes.get(name)) {
            arr.add(node)
        }
    }

    protected func popRecycleNode(name: String): ?CustomView {
        let arr = cachedRecycleNodes.get(name) ?? return None
        if (arr.size > 0) {
            return arr.remove(at: arr.size - 1)
        }
        None
    }

    // When parent View is deleted, release all cached nodes
    protected func purgeAllCachedRecycleNode() {
        for ((key, arr) in cachedRecycleNodes) {
            for (node in arr) {
                node.resetRecycleCustomNode()
            }
        }
        cachedRecycleNodes.clear()
    }
}

class BidirectionalMap {
    private let fwdMap: HashMap<Int64, Int64>
    private let revMap: HashMap<Int64, Int64>

    init() {
        fwdMap = HashMap<Int64, Int64>()
        revMap = HashMap<Int64, Int64>()
    }

    func remove(key: Int64): Unit {
        if (!fwdMap.contains(key)) {
            return
        }
        let rev = fwdMap.get(key).getOrThrow()
        fwdMap.remove(key)
        revMap.remove(key)
        ()
    }

    func get(key: Int64): ?Int64 {
        let fwdVal = fwdMap.get(key)
        let revVal = revMap.get(key)
        if (let Some(v) <- fwdVal) {
            return v
        }
        if (let Some(v) <- revVal) {
            return v
        }
        return None
    }

    func put(pair: (Int64, Int64)) {
        fwdMap[pair[0]] = pair[1]
        revMap[pair[1]] = pair[0]
    }
}
