/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 package ohos.arkui.component.navigation

import ohos.arkui.component.common.*
import ohos.arkui.component.util.*
import ohos.base.*
import ohos.ffi.*
import ohos.labels.APILevel

foreign {
    func FfiOHOSAceFrameworkNavdestinationCreate(): Unit
    func FfiOHOSAceFrameworkNavdestinationSetOnBackPressed(callback: Int64): Unit
    func FfiOHOSAceFrameworkNavdestinationSetOnReady(callback: Int64): Unit
    func FfiOHOSAceFrameworkNavdestinationSetTitleWithBuilderOptions(builder: Int64, options: CJNavigationTitleOptions): Unit
    func FfiOHOSAceFrameworkNavdestinationSetTitleWithBuilder(builder: Int64): Unit
    func FfiOHOSAceFrameworkNavdestinationSetHideTitleBar(value: Bool): Unit
    func FfiOHOSAceFrameworkNavdestinationSetTitleWithString(value: CString): Unit
    func FfiOHOSAceFrameworkNavdestinationSetTitleWithStringOptions(value: CString, options: CJNavigationTitleOptions): Unit
}

@C
struct CJNavDestinationContext {
    CJNavDestinationContext(
        let pathInfo: CJNavPathInfo,
        let pathStack: Int64,
        let navDestinationId: UInt64
    ) {}
}

/**
 * Indicates the context of NavDestination.
 */
@!APILevel[
    since:"22",
    syscap: "SystemCapability.ArkUI.ArkUI.Full"
]
public class NavDestinationContext {
    /**
     * Path information of the navigation destination page.
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public var pathInfo: ?NavPathInfo

    /**
     * Page stack where the current navigation destination page is located.
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public var pathStack: ?NavPathStack

    /**
     * Unique ID of the current navigation destination page, which is automatically generated by the system
     * and is irrelevant to the universal attribute **id** of the component.
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public var navDestinationId: ?String

    init(
        pathInfo: NavPathInfo,
        pathStack: NavPathStack,
        navDestinationId: String
    ) {
        this.pathInfo = pathInfo
        this.pathStack = pathStack
        this.navDestinationId = navDestinationId
    }
}

/**
 * Defines NavDestination Component.
 */
@!APILevel[
    since:"22",
    syscap: "SystemCapability.ArkUI.ArkUI.Full"
]
public class NavDestination <: CommonMethodComponent<NavDestination> & NavDestinationAttribute {
    /**
     * The construct function of NavDestination.
     *
     * @param { () -> Unit } child
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public init(child!: () -> Unit = { => }) {
        unsafe {
            FfiOHOSAceFrameworkNavdestinationCreate()
        }
        this.child = child
    }
    /**
     * Called when the navigation destination is about
     * to be unmounted (or when the transition animation, if any, is about to start).
     *
     * @param { ?() -> Bool } callback - Indicates callback when the backButton is pressed.
     * @returns { This }
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func onBackPressed(callback: ?() -> Bool): This {
        let tmpCallback = callback ?? { => true }
        unsafe {
            FfiOHOSAceFrameworkNavdestinationSetOnBackPressed(
                Callback0Param<Bool>(tmpCallback).getID()
            )
        }
        this
    }

    /**
     * Invoked before sub-components of NavDestination are created.
     *
     * @param { ?Callback<NavDestinationContext, Unit> } callback
     * - Indicates callback that invoked before sub-components of NavDestination are created.
     * @returns { This }
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func onReady(callback: ?Callback<NavDestinationContext, Unit>): This {
        let tmpCallback = callback ?? { _ => }
        unsafe {
            let wrapper = { ctx: CJNavDestinationContext =>
                let pathInfo = NavPathInfo(
                    name: ctx.pathInfo.name.toString(),
                    param: ctx.pathInfo.param.toString()
                )
                var id = ctx.navDestinationId.toString()
                let pathStack = RemoteDataManager.getInstance().getOrCreate<NavPathStack>(
                    ctx.pathStack, {id => NavPathStack()}
                )
                tmpCallback(NavDestinationContext(pathInfo, pathStack, id))
                if (!ctx.pathInfo.param.isNull()) {
                    LibC.free(ctx.pathInfo.param)
                }
                if (!ctx.pathInfo.navDestinationId.isNull()) {
                    LibC.free(ctx.pathInfo.navDestinationId)
                }
            }
            let lambda = Callback1Param<CJNavDestinationContext, Unit>(wrapper)
            FfiOHOSAceFrameworkNavdestinationSetOnReady(lambda.getID())
        }
        this
    }

    /**
     * Sets the page title. When the NavigationCustomTitle type is used to set the height,
     * the titleMode attribute does not take effect.
     * When the title string is too long: (1) If no subtitle is set, the string is scaled down,
     * wrapped in two lines, and then clipped with an ellipsis (...); (2) If a subtitle is set,
     * the subtitle is scaled down and then clipped with an ellipsis (...).
     *
     * @param { ?ResourceStr } value
     * @param { ?NavigationTitleOptions } [options] - Indicates the options of titlebar.
     * @returns { This }
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func title(value: ?ResourceStr, options!: ?NavigationTitleOptions = None): This {
        unsafe {
            try(unsafeSrc = LibC.mallocCString(transResourceStrToString(value ?? "")).asResource()) {
                if (let Some(v) <- options) {
                    var options_ = v.toNative()
                    FfiOHOSAceFrameworkNavdestinationSetTitleWithStringOptions(unsafeSrc.value, options_)
                } else {
                    FfiOHOSAceFrameworkNavdestinationSetTitleWithString(unsafeSrc.value)
                }
            }
        }
        this
    }

    /**
     * Sets the page title. When the NavigationCustomTitle type is used to set the height,
     * the titleMode attribute does not take effect.
     * When the title string is too long: (1) If no subtitle is set, the string is scaled down,
     * wrapped in two lines, and then clipped with an ellipsis (...); (2) If a subtitle is set,
     * the subtitle is scaled down and then clipped with an ellipsis (...).
     *
     * @param { ?CustomBuilder } value
     * @param { ?NavigationTitleOptions } options - Indicates the options of titlebar.
     * @returns { This }
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func title(value: ?CustomBuilder, options!: ?NavigationTitleOptions = None): This {
        unsafe {
            if (let Some(v) <- options) {
                var options_ = v.toNative()
                FfiOHOSAceFrameworkNavdestinationSetTitleWithBuilderOptions(
                    Callback0Param<Unit>(value ?? {=>}).getID(), options_)
            } else {
                FfiOHOSAceFrameworkNavdestinationSetTitleWithBuilder(Callback0Param<Unit>(value ?? {=>}).getID())
            }
        }
        this
    }

    /**
     * Specifies whether to hide the title bar.
     *
     * @param { ?Bool } value
     * @returns { This }
     */
    @!APILevel[
        since:"22",
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func hideTitleBar(value: ?Bool): This {
        unsafe {
            FfiOHOSAceFrameworkNavdestinationSetHideTitleBar(value ?? false)
        }
        this
    }
}
