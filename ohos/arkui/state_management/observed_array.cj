/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

protected package ohos.arkui.state_management

import ohos.base.*
import std.collection.*
import ohos.labels.APILevel

@!APILevel[
    21,
    atomicservice: true,
    stagemodelonly: true,
    syscap: "SystemCapability.ArkUI.ArkUI.Full"
]
public class ObservedArray<T> <: ObservedComplexAbstract & ArrayLike<T> {
    private var internalValue: Array<T>

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public init(initValue: Array<T>) {
        this.internalValue = initValue
    }

    private func setInternalValue(newValue: Array<T>) {
        this.internalValue = newValue
    }

    private func setInternalValue(newValue: ObservedArray<T>) {
        this.internalValue = newValue.get()
        for (item in internalValue) {
            let observedItem = item as ObservedComplexAbstract
            match (observedItem) {
                case Some(v) =>
                    // if item in ObservedArray is observed, new item should inherit observers form observedArray
                    v.inheritObservers(getObservers())
                case _ => ()
            }
        }
    }

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func subscribeInner(observer: Observer): Unit {
        subscribe(observer)
        for (arrItem in internalValue) {
            let observedItem = arrItem as ObservedComplexAbstract
            match (observedItem) {
                case Some(v) =>
                    v.subscribeInner(observer)
                    v.setInfo(info)
                case _ => ()
            }
        }
    }

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func unsubscribeInner(observer: Observer): Unit {
        unsubscribe(observer)
        for (arrItem in internalValue) {
            let observedItem = arrItem as ObservedComplexAbstract
            match (observedItem) {
                case Some(v) => v.unsubscribeInner(observer)
                case _ => ()
            }
        }
    }

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func get(): Array<T> {
        recordDependentUpdate()
        notifyRead()
        this.internalValue
    }

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func set(newValue: Array<T>): Unit {
        this.setInternalValue(newValue)
        this.notifyChanges()
    }

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public func set(newValue: ObservedComplexAbstract): Unit {
        let observedArray = newValue as ObservedArray<T>
        this.setInternalValue(observedArray.getOrThrow())
    }

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public operator func [](index: Int64): T {
        recordDependentUpdate()
        notifyRead()
        return internalValue[index]
    }

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public operator func [](index: Int64, value!: T): Unit {
        if (isEqual<T>(internalValue[index], value)) {
            return
        }
        this.internalValue[index] = value
        let realValue = internalValue[index] as ObservedComplexAbstract
        match (realValue) {
            case Some(v) => v.inheritObservers(getObservers())
            case _ => ()
        }
        this.notifyChanges()
    }

    @!APILevel[
        21,
        atomicservice: true,
        stagemodelonly: true,
        syscap: "SystemCapability.ArkUI.ArkUI.Full"
    ]
    public prop size: Int64 {
        get() {
            this.internalValue.size
        }
    }
}
